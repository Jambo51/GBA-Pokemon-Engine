/*
 * Palettes.cpp
 *
 *  Created on: 1 Jun 2016
 *      Author: CoolerMaster
 */

#include "Core/Palettes.h"
#include "Scenes/SceneManager.h"
#include "Core/Maths.h"

using namespace Scenes;

namespace Core
{

	EWRAM_LOCATION ALIGN(1) bool Palettes::doFade = false;
	EWRAM_LOCATION ALIGN(1) bool Palettes::doFade2 = false;
	EWRAM_LOCATION ALIGN(1) bool Palettes::fadeStyle = false;
	EWRAM_LOCATION ALIGN(1) bool Palettes::fadeBack = false;
	EWRAM_LOCATION ALIGN(1) bool Palettes::doCallback = false;
	EWRAM_LOCATION ALIGN(1) bool Palettes::doExitCallback = false;
	EWRAM_LOCATION ALIGN(1) bool Palettes::fade256 = false;
	EWRAM_LOCATION ALIGN(4) SmartPointer<Callbacks::Callback> Palettes::callbackFunction = SmartPointer<Callbacks::Callback>();
	EWRAM_LOCATION ALIGN(4) SmartArrayPointer<u16> Palettes::currentPalette = SmartArrayPointer<u16>();
	EWRAM_LOCATION ALIGN(4) SmartArrayPointer<u16> Palettes::targetPalette = SmartArrayPointer<u16>();
	EWRAM_LOCATION ALIGN(4) u32 Palettes::numFrames = 0;
	EWRAM_LOCATION ALIGN(4) u32 Palettes::originalFrames = 0;
	EWRAM_LOCATION ALIGN(4) u32 Palettes::alphaSteps = 0;
	EWRAM_LOCATION ALIGN(4) u32 Palettes::currentAlpha = 0;
	EWRAM_LOCATION ALIGN(1) bool Palettes::paletteWriteDetected = false;
	RODATA_LOCATION ALIGN(4) u32 Palettes::framesInFades[MaxFadeIDs] = { 8, 16, 32, 64, 128 };
	RODATA_LOCATION ALIGN(4) u32 Palettes::alphaStepsInFades[MaxFadeIDs] = { 4, 2, 1, 0x800, 0x400 };
	RODATA_LOCATION ALIGN(2) u16 Palettes::blackPalette[512] = { 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000 };
	RODATA_LOCATION ALIGN(2) u16 Palettes::whitePalette[512] = { 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

	Palettes::Palettes()
	{

	}

	Palettes::~Palettes()
	{

	}

	void Palettes::SetAllPalettes(SmartArrayPointer<u16> source, SmartArrayPointer<u16> destination)
	{
		if (destination)
		{
			source.CopyTo(destination, 0, 0x400);
		}
		else
		{
			source.CopyTo((void*)0x05000000, 0, 0x400);
		}
	}

	void Palettes::SetPalette(u32 paletteID, SmartArrayPointer<u16> source, SmartArrayPointer<u16> destination)
	{
		if (destination)
		{
			source.CopyTo(destination, paletteID * 0x20, 32);
		}
		else
		{
			source.CopyTo((void*)0x05000000, paletteID * 0x20, 32);
		}
	}

	void Palettes::SetColour(u32 paletteID, u32 slotID, Colour c, SmartArrayPointer<u16> destination)
	{
		if (destination)
		{
			destination[(0x10 * paletteID) + slotID] = c.colour;
		}
		else
		{
			*((u16*)(0x05000000 + (0x20 * paletteID) + (2 * slotID))) = c.colour;
		}
	}

	void Palettes::Update()
	{
		if (doFade)
		{
			doFade = false;
			doFade2 = true;
		}
		else if (doFade2)
		{
			if (numFrames != 0)
			{
				if (fadeStyle)
				{
					if (fadeBack)
					{
						currentAlpha -= alphaSteps;
						DoFade();
						numFrames--;
						fadeBack = false;
						fadeStyle = false;
					}
					else
					{
						currentAlpha += alphaSteps;
						DoFade();
						numFrames--;
						if (numFrames == 0)
						{
							fadeBack = true;
							numFrames = originalFrames;
						}
					}
				}
				else
				{
					currentAlpha += alphaSteps;
					DoFade();
					numFrames--;
				}
			}
			else
			{
				doFade = false;
				doFade2 = false;
				currentPalette.Clear(512);
				currentPalette = 0;
				if (targetPalette)
				{
					SetAllPalettes(targetPalette);
					if (targetPalette < 0x02040000 && targetPalette >= 0x02000000)
					{
						targetPalette.Clear(512);
					}
				}
				targetPalette = 0;
				if (callbackFunction)
				{
					callbackFunction->DoCallback();
					callbackFunction = 0;
				}
				if (doCallback)
				{
					if (doExitCallback)
					{
						SceneManager::RunExitCallback();
					}
					else
					{
						SceneManager::RunEnterCallback();
					}
				}
				if (!paletteWriteDetected)
				{
					doCallback = false;
					doExitCallback = false;
					fade256 = false;
				}
				paletteWriteDetected = false;
			}
		}
	}

	u32 Palettes::GetFadeColour(u16 clra, u16 clrb)
		{
			if (clra == clrb)
			{
				return clra;
			}


			const u32 rbmask= (RED_MASK|BLUE_MASK), gmask= GREEN_MASK;
			const u32 rbhalf= 0x4010, ghalf= 0x0200;

			// Red and blue
			u32 parta = clra & rbmask;
			u32 partb = clrb & rbmask;
			u32 part = (partb-parta) * (32 - ((currentAlpha < 0x100) ? currentAlpha : currentAlpha >> 12)) + parta*32 + rbhalf;
			u16 clr = (part >> 5) & rbmask;

			// Green
			parta = clra & gmask;
			partb = clrb & gmask;
			part = (partb-parta) * (32 - ((currentAlpha < 0x100) ? currentAlpha : currentAlpha >> 12)) + parta*32 + ghalf;
			clr |= (part >> 5) & gmask;

			return clr;
		}

		void Palettes::DoFadeOnPalette(u32 paletteID, SmartArrayPointer<u16> target, SmartArrayPointer<u16> current)
		{
			u16* dst = (u16*)(0x05000000 + 0x20 * paletteID);
			for(u32 i = (fade256) ? 0 : 1; i < 16; i++)
			{
				dst[i] = GetFadeColour(target[i + (0x10 * paletteID)], current[i + (0x10 * paletteID)]);
			}
		}

		void Palettes::DoFade()
		{
			for(u32 i = 0; i < 32; i++)
			{
				DoFadeOnPalette(i, targetPalette, currentPalette);
			}
		}

		SmartArrayPointer<u16> Palettes::GetCurrentPalette()
		{
			u16* temp = new u16[512];
			memcpy32((void*)temp, (const void*)0x05000000, 0x100);
			return SmartArrayPointer<u16>(temp);
		}

		void Palettes::FadeToGreyScale(FadeIDs FrameCount, bool callback, bool exitCallback)
		{
			if (!doFade)
			{
				fadeStyle = false;
				currentPalette = GetCurrentPalette();
				targetPalette = GetGreyScale(currentPalette);
				doFade = true;
				numFrames = FrameCount;
				doCallback = callback;
				doExitCallback = exitCallback;
			}
		}

		SmartArrayPointer<u16> Palettes::GetGreyScale(SmartArrayPointer<u16> &original)
		{
			u16* dst = new u16[512];
			u16* orig = dst;
			u32 ii;
			u32 clr, gray, rr, gg, bb;

			for(ii=0; ii< 512; ii++)
			{
				clr = original[ii];

				// Do RGB conversion in .8 fixed point
				rr= ((clr    )&31)*0x4C;	// 29.7%
				gg= ((clr>> 5)&31)*0x96;	// 58.6%
				bb= ((clr>>10)&31)*0x1E;	// 11.7%
				gray= (rr+gg+bb+0x80)>>8;

				*dst++= RGB15(gray, gray, gray);
			}
			return SmartArrayPointer<u16>(orig);
		}

		void Palettes::FadeToPalette(SmartArrayPointer<u16> newPalette, bool fade256Colours, FadeIDs FrameCount, bool callback, bool exitCallback)
		{
			if (!doFade)
			{
				fadeStyle = false;
				if (FrameCount < MaxFadeIDs)
				{
					currentPalette = GetCurrentPalette();
					doFade = true;
					numFrames = framesInFades[FrameCount];
					alphaSteps = alphaStepsInFades[FrameCount];
					currentAlpha = 0;
					targetPalette = newPalette;
					doCallback = callback;
					doExitCallback = exitCallback;
					paletteWriteDetected = true;
					fade256 = fade256Colours;
				}
			}
			else
			{
				if (targetPalette < 0x02040000 && targetPalette >= 0x02000000)
				{
					targetPalette.Clear(512);
				}
				targetPalette = 0;
			}
		}

		void Palettes::PaletteFlash(SmartArrayPointer<u16> newPalette, bool fade256Colours, FadeIDs FrameCount, bool callback, bool exitCallback, u32 blendAmount)
		{
			if (!doFade)
			{
				fadeStyle = true;
				if (FrameCount < MaxFadeIDs)
				{
					currentPalette = GetCurrentPalette();
					doFade = true;
					numFrames = Maths::UnsignedFractionalMultiplication(framesInFades[FrameCount], blendAmount);
					alphaSteps = alphaStepsInFades[FrameCount];
					currentAlpha = 0;
					targetPalette = newPalette;
					doCallback = callback;
					doExitCallback = exitCallback;
					paletteWriteDetected = true;
					fade256 = fade256Colours;
					originalFrames = numFrames;
				}
			}
			else
			{
				if ((targetPalette < 0x02040000) && (targetPalette >= 0x02000000))
				{
					targetPalette.Clear(512);
				}
				targetPalette = 0;
			}
		}



		void Palettes::SetPaletteToWhite()
		{
			SetAllPalettes(SmartArrayPointer<u16>((u16*)&whitePalette));
		}
}


